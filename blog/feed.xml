<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2019-11-04T22:30:50-05:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">jojo</title><subtitle></subtitle><author><name>Hains Jojo</name></author><entry><title type="html">Binary Exploitation Challenges from iCTFF 2019</title><link href="http://localhost:4000/blog/2019/11/04/Binaryictff.html" rel="alternate" type="text/html" title="Binary Exploitation Challenges from iCTFF 2019" /><published>2019-11-04T00:00:00-05:00</published><updated>2019-11-04T00:00:00-05:00</updated><id>http://localhost:4000/blog/2019/11/04/Binaryictff</id><content type="html" xml:base="http://localhost:4000/blog/2019/11/04/Binaryictff.html">&lt;h1 id=&quot;bin100&quot;&gt;Bin100&lt;/h1&gt;

&lt;p&gt;We are given a PE32 executable file which when run asks user for a serial key.&lt;/p&gt;

&lt;p&gt;Simply opening the file in &lt;code class=&quot;highlighter-rouge&quot;&gt;ghidra&lt;/code&gt;. We see strings given in the output including a base64 text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trying to decode this base64 data, we seem to get a version of the encrypted flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going through the source code in ghidra, we see that the flag seems to be bit shifted.&lt;/p&gt;

&lt;p&gt;Learning more about bit shifting from https://wiki.python.org/moin/BitwiseOperators.&lt;/p&gt;

&lt;p&gt;We can write a small python script that would shift the contents of the encrypted flag to 1.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import base64
cipher = '6tLo2vauZpjGYJpmvuievo7c0qTKZpxijtyK+g=='
a = base64.b64decode(cipher)
c = []
for char in a:
        c.append(chr(ord(char) &amp;gt;&amp;gt; 1))
d = ''.join(c)
print(&quot;Flag: &quot;+d) 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Running this gives us the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution-2&quot;&gt;Solution 2:&lt;/h2&gt;

&lt;p&gt;If we want to want to avoid python scripting and stop worrying about the bit shift, we could decode the initial base64 just by using Cyberchef (https://gchq.github.io/CyberChef).&lt;/p&gt;

&lt;p&gt;Just add &lt;code class=&quot;highlighter-rouge&quot;&gt;From Base64&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Bit Shift Right&lt;/code&gt; options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bin200&quot;&gt;Bin200&lt;/h1&gt;

&lt;p&gt;We are given 2 files named decryptor and flag. Viewing the contents of these two files, file ‘flag’ seems to be encrypted data, which we assume when encrypted gives us the flag we are looking for.&lt;/p&gt;

&lt;p&gt;Running file command against ‘decrytor’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that it is python 3.6 compiled. We can get the source code decompiled by using &lt;code class=&quot;highlighter-rouge&quot;&gt;uncompyle6&lt;/code&gt;. In order to do that we have to rename &lt;code class=&quot;highlighter-rouge&quot;&gt;decryptor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;decryptor.pyc&lt;/code&gt;, essentially add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pyc&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;Here we have the decompiled code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at this python code we see that the program asks the user for a key and simply XORes the flag in plaintext with the key…&lt;/p&gt;

&lt;p&gt;Now we know that flag is encrypted using a XOR algorithm… We also know that the flag format would be uitm{….}.&lt;/p&gt;

&lt;p&gt;Since we know the cipher text (flag) and plaintext (uitm{..}). We could guess the key by XORing each other.&lt;/p&gt;

&lt;p&gt;To get the key, we try to give the key as &lt;code class=&quot;highlighter-rouge&quot;&gt;uitm{&lt;/code&gt;, which would be the first 5 characters of our flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We get a byte array of values &lt;code class=&quot;highlighter-rouge&quot;&gt;yFk*}T@M\x18Cm\\F\x18E~Vo\x136Sfe\x18Cm\\f:&lt;/code&gt;.
We try to do the same thing again, but this time giving the first 5 bytes of our last output which is ` yFk*}`.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/binictff/b8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag: uitm{XoR_EasY_CrypT0_Iz_Easy}.&lt;/p&gt;</content><author><name>Hains Jojo</name></author><category term="CTF" /><category term="BinExp" /><category term="xor" /><summary type="html">Bin100</summary></entry><entry><title type="html">Augmented Reality Security &amp;amp; Forensic Competition 2019</title><link href="http://localhost:4000/blog/2019/10/04/AR-2019.html" rel="alternate" type="text/html" title="Augmented Reality Security &amp; Forensic Competition 2019" /><published>2019-10-04T00:00:00-04:00</published><updated>2019-10-04T00:00:00-04:00</updated><id>http://localhost:4000/blog/2019/10/04/AR-2019</id><content type="html" xml:base="http://localhost:4000/blog/2019/10/04/AR-2019.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#line&quot;&gt;Line Of Duty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shadows&quot;&gt;A Game Of Shadows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#island&quot;&gt;Shutter Island&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#criminal&quot;&gt;Criminal Minds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#witness&quot;&gt;The Lonely Witness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#murder&quot;&gt;Murder on the Orient Express&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bloody&quot;&gt;Bloody Murder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;On 3rd October 2019, a new game was launched for APU students as a part of InfoSec day named Augmented Reality Security and Forensics competition. Our team participated in this competition that involved gathering clues from a murder scene and analyzing and dissecting them to find flags. The 10 clues were URLs which were links to files which we downloaded. From there, we tried to solve the challenges and get the flags. Our duo ended up being the champions of this competition, this is my write up for the challenges.&lt;/p&gt;

&lt;h1 id=&quot;line-of-duty-&quot;&gt;Line Of Duty &lt;a name=&quot;line&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this challenge we are given a JPG image of Pablo Escobar. Viewing the metadata doesn’t give us anything interesting.&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; against it we get this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Z_ie
{cco6
on 6
o`&amp;gt;E
y4Q@
FLAG .txt
FLAG .txt
~Sz5p
~Sz5p
Murder!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAG .txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Murder!&lt;/code&gt;.. this could be a potential password.&lt;/p&gt;

&lt;p&gt;Since we saw &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAG .txt&lt;/code&gt; embedded in the JPG, we go through the file using &lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard 1.01
198477        0x3074D         Zip archive data, encrypted at least v2.0 to extract, compressed size: 60, uncompressed size: 32, name: FLAG .txt
198705        0x30831         End of Zip archive, footer length: 22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can extract the Zip archive using &lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk -e&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;foremost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Extracting the zip file using the password &lt;code class=&quot;highlighter-rouge&quot;&gt;Murder!&lt;/code&gt; we got from &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; we have a text file named &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAG .txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Viewing the contents of the file.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;YOU CANT CATCH ME! &quot;P4BL0#C0BAR&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P4BL0#C0BAR&lt;/code&gt; looks like a potential key.&lt;/p&gt;

&lt;p&gt;Now we try to extract contents from the inital JPG using this key.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/ARSEC/Line of Duty/Line of Duty/blog# steghide extract -sf Line\ of\ Duty.jpg -p P4BL0#C0BAR
wrote extracted data to &quot;steganopayload6903.txt&quot;.
root@c0dbat:~/CTF/ARSEC/Line of Duty/Line of Duty/blog# cat steganopayload6903.txt 
H3YTH3R3P33P5@ARSECFOR2019
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We have the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;H3YTH3R3P33P5@ARSECFOR2019&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-game-of-shadows-&quot;&gt;A Game Of Shadows &lt;a name=&quot;shadows&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;We are given a html file which opens to look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/html_p.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the source of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/html_2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get the string &lt;code class=&quot;highlighter-rouge&quot;&gt;NB2HI4DTHIXS62LNM52XELTDN5WS6NKKGJCG4OBS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the heading of the html file was &lt;code class=&quot;highlighter-rouge&quot;&gt;BeepBeep32One&lt;/code&gt; we try to decode it using &lt;code class=&quot;highlighter-rouge&quot;&gt;base32&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/html_3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We get an image url, going to this url we find the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://imgur.com/5J2Dn82&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;shutter-island-&quot;&gt;Shutter Island &lt;a name=&quot;island&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;This challenge is based on Audio Steganography.. We are given 2 audio files named &lt;code class=&quot;highlighter-rouge&quot;&gt;araudiosteg1&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;araudiosteg2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Opening both the files in Audacity, we get this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/audio1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listening to the sound, it is almost inaudiable, so we decided to view the spectogram of these files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/audio2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First file &lt;code class=&quot;highlighter-rouge&quot;&gt;araudiosteg1&lt;/code&gt; gives this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Remember this “listen”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Second file &lt;code class=&quot;highlighter-rouge&quot;&gt;araudiosteg2&lt;/code&gt; gives this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;look closer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; could be a potential password but where do we use it?&lt;/p&gt;

&lt;p&gt;Running binwalk on the second audio file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
441188        0x6BB64         JPEG image data, JFIF standard 1.01


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We see that there is a hidden JPEG image in it. We extracted this image using &lt;code class=&quot;highlighter-rouge&quot;&gt;foremost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/shutter.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We extracted the hidden text using &lt;code class=&quot;highlighter-rouge&quot;&gt;steghide&lt;/code&gt; and password as &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steghide extract -sf shutter.jpg -p &quot;listen&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We get a text file that contains the flag.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n0w_y0u_s33_me@ARSECFOR2019
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;criminal-minds-&quot;&gt;Criminal Minds &lt;a name=&quot;criminal&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;For this challenge we are given a pcapng file.
Opening the file with wireshark, we can see all the packets, sorting it by &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; we see this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/pcap1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can already see the flag in the first packet, vewing the TCP stream&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/pcap2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag is there in the GET parameter.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%40&lt;/code&gt; is the url encoded version of &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Changing that we have the flag:
&lt;code class=&quot;highlighter-rouge&quot;&gt;y0u_f0und_m3@ARSECFOR2019&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-lonely-witness-&quot;&gt;The Lonely Witness &lt;a name=&quot;witness&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;We are given a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Crack-it.jpeg&lt;/code&gt;.
Viewing the magic numbers we can see that it is definitely not a jpeg file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/ARSEC/The Lonely Witness/The Lonely Witness# file Crack-it\ .jpeg 
Crack-it .jpeg: DOS/MBR boot sector MS-MBR,D0S version 3.3-7.0 english at offset 0x8b &quot;Invalid partition table&quot; at offset 0xa3 &quot;Error loading operating system&quot; at offset 0xc2 &quot;Missing operating system&quot;, disk signature 0xa0baba; partition 1 : ID=0x6, active, start-CHS (0x0,1,1), end-CHS (0x3ff,1,63), startsector 64, 1966016 sectors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Viewing the contents using binwalk.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/ARSEC/The Lonely Witness/The Lonely Witness# binwalk Crack-it\ .jpeg 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
331776        0x51000         PDF document, version: &quot;1.6&quot;
332871        0x51447         JPEG image data, JFIF standard 1.01
335981        0x5206D         Uncompressed Adobe Flash SWF file, Version 22, File size (header included) 84593874
1374410       0x14F8CA        JPEG image data, JFIF standard 1.01
2476285       0x25C8FD        JPEG image data, JFIF standard 1.01
3126661       0x2FB585        JPEG image data, JFIF standard 1.01
4493312       0x449000        Zip archive data, at least v2.0 to extract, compressed size: 139, uncompressed size: 189, name: app.config
4493491       0x4490B3        Zip archive data, at least v2.0 to extract, compressed size: 128, uncompressed size: 128, name: lock1.txt
4493658       0x44915A        Zip archive data, at least v2.0 to extract, compressed size: 128, uncompressed size: 128, name: lock2.txt
4493825       0x449201        Zip archive data, at least v2.0 to extract, compressed size: 34427, uncompressed size: 77824, name: Start The Quiz.exe
4528300       0x4518AC        Zip archive data, at least v2.0 to extract, compressed size: 14, uncompressed size: 14, name: submitted.txt
4528646       0x451A06        End of Zip archive, footer length: 22
4542464       0x455000        JPEG image data, EXIF standard
4542476       0x45500C        TIFF image data, big-endian, offset of first image directory: 8
4553353       0x457A89        Copyright string: &quot;Copyright (c) 1998 Hewlett-Packard Company&quot;
4706304       0x47D000        PDF document, version: &quot;1.7&quot;
5623808       0x55D000        JPEG image data, JFIF standard 1.01
6115328       0x5D5000        JPEG image data, JFIF standard 1.01
6122548       0x5D6C34        TIFF image data, little-endian offset of first image directory: 8
6122976       0x5D6DE0        Copyright string: &quot;copyright.&quot;
6128520       0x5D8388        Copyright string: &quot;Copyright (c) 1998 Hewlett-Packard Company&quot;
6133269       0x5D9615        Copyright string: &quot;CopyrightFlag=&quot;true&quot; photoshop:ColorMode=&quot;3&quot; photoshop:ICCProfile=&quot;sRGB IEC61966-2.1&quot; xmpMM:DocumentID=&quot;adobe:docid:photoshop:37&quot;
6137525       0x5DA6B5        Copyright string: &quot;copyright.&amp;lt;/rdf:li&amp;gt; &amp;lt;/rdf:Alt&amp;gt; &amp;lt;/dc:rights&amp;gt; &amp;lt;dc:description&amp;gt; &amp;lt;rdf:Alt&amp;gt; &amp;lt;rdf:li xml:lang=&quot;x-default&quot;&amp;gt;Forensic experts takes a sam&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can open this Partition in FTK Imager or Autopsy, but for our ease we decided to use &lt;code class=&quot;highlighter-rouge&quot;&gt;foremost&lt;/code&gt; which does the job perfectly.&lt;/p&gt;

&lt;p&gt;Going through the files, we have this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/lonley.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;murder-on-the-orient-express-&quot;&gt;Murder on the Orient Express &lt;a name=&quot;murder&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;We are given two jpeg files &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready.jpeg&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;Steady.jpeg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/Ready.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/Steady.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk&lt;/code&gt; on Ready.jpeg we get this&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard 1.01
9264          0x2430          Zip archive data, at least v2.0 to extract, compressed size: 346, uncompressed size: 1312, name: [Content_Types].xml
10179         0x27C3          Zip archive data, at least v2.0 to extract, compressed size: 239, uncompressed size: 590, name: _rels/.rels
10979         0x2AE3          Zip archive data, at least v2.0 to extract, compressed size: 1118, uncompressed size: 4708, name: word/document.xml
12144         0x2F70          Zip archive data, at least v2.0 to extract, compressed size: 244, uncompressed size: 817, name: word/_rels/document.xml.rels
12710         0x31A6          Zip archive data, at least v2.0 to extract, compressed size: 1746, uncompressed size: 8393, name: word/theme/theme1.xml
14507         0x38AB          Zip archive data, at least v2.0 to extract, compressed size: 1025, uncompressed size: 2845, name: word/settings.xml
15579         0x3CDB          Zip archive data, at least v2.0 to extract, compressed size: 2931, uncompressed size: 29216, name: word/styles.xml
18555         0x487B          Zip archive data, at least v2.0 to extract, compressed size: 295, uncompressed size: 655, name: word/webSettings.xml
18900         0x49D4          Zip archive data, at least v2.0 to extract, compressed size: 451, uncompressed size: 1419, name: word/fontTable.xml
19399         0x4BC7          Zip archive data, at least v2.0 to extract, compressed size: 378, uncompressed size: 765, name: docProps/core.xml
20088         0x4E78          Zip archive data, at least v2.0 to extract, compressed size: 469, uncompressed size: 984, name: docProps/app.xml
21572         0x5444          End of Zip archive, footer length: 22


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Analysing more we find that its a docx file, Opening it in word gives this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/doc1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though it looks like a flag, it is not. It says that is a password for the next file.&lt;/p&gt;

&lt;p&gt;Running binwalk on the next file, we have.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/ARSEC/Murder on the Orient Express/blog# binwalk Steady.jpeg 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard 1.01
30            0x1E            TIFF image data, little-endian offset of first image directory: 8
36048         0x8CD0          RAR archive data, version 5.x


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The seems to be a RAR archive embedded.&lt;/p&gt;

&lt;p&gt;Opening the archive we see that its Password Protected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/doc2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;AR-FRC@ARSECFOR2019&lt;/code&gt; doesn’t seem to work, so using just &lt;code class=&quot;highlighter-rouge&quot;&gt;AR-FRC&lt;/code&gt; extracted these files successfully.&lt;/p&gt;

&lt;p&gt;Opening the pdf file we have the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/doc3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag :&lt;code class=&quot;highlighter-rouge&quot;&gt;1Nv3$71G@710N_$7@r7@ARSECFOR2019&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;bloody-murder-&quot;&gt;Bloody Murder &lt;a name=&quot;bloody&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;We are given a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;huehue.raw&lt;/code&gt;. Running &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; against it we get:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/ARSEC/Bloody Murder/Bloody Murder# file huehue.raw 
huehue.raw: RFC 822 mail, ASCII text, with very long lines
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Opening this is hex editor we see this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/b1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see a file &lt;code class=&quot;highlighter-rouge&quot;&gt;hah&lt;/code&gt; with base64 encoded contents, we can manually decode this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;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&quot; | base64 -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Viewing the contents of the decoded file, it looks like it has been encoded.&lt;/p&gt;

&lt;p&gt;Remember the file name was huehue.. so we try to decode this using UUencoding.&lt;/p&gt;

&lt;p&gt;We get a zip file, extracting the zip file we get the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/AR/flag.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Hains Jojo</name></author><category term="Forensic" /><summary type="html">Table of contents Introduction Line Of Duty A Game Of Shadows Shutter Island Criminal Minds The Lonely Witness Murder on the Orient Express Bloody Murder</summary></entry><entry><title type="html">Defeating steganography techniques in war games</title><link href="http://localhost:4000/blog/2019/08/15/stego-techniques.html" rel="alternate" type="text/html" title="Defeating steganography techniques in war games" /><published>2019-08-15T00:00:00-04:00</published><updated>2019-08-15T00:00:00-04:00</updated><id>http://localhost:4000/blog/2019/08/15/stego-techniques</id><content type="html" xml:base="http://localhost:4000/blog/2019/08/15/stego-techniques.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basics&quot;&gt;Tools&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jpg&quot;&gt;JPEG Tools&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#png&quot;&gt;PNG Tools&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#audio&quot;&gt;Audio Tools&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Steganography is the technique used to hide data inside other data, for example, to hide a secret message inside an image, or a secret picture inside an audio file, a form of security through obscurity.. There are several ways to do that, and there are several softwares out there too. Almost all wargames I have been part of always had a steganography challenge in which we would be provided with a media file are expected to retrieve the hidden message or commonly called as a flag. Here I am trying to document few tools that I frequently use to solve these challenges.&lt;/p&gt;

&lt;h2 id=&quot;basics-&quot;&gt;Basics &lt;a name=&quot;basics&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;file&quot;&gt;File&lt;/h3&gt;

&lt;p&gt;This simple &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; command is used to determine the file type, we shouldn’t always trust the file extentions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/EASTER# file setup.png
setup.png: PE32 executable (GUI) Intel 80386, for MS Windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By looking at the file’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.png&lt;/code&gt; extention we assume its an image file, but it is actually an executable P32 malware.&lt;/p&gt;

&lt;h3 id=&quot;binwalk&quot;&gt;Binwalk&lt;/h3&gt;

&lt;p&gt;This tool is used for file carving, it scans through the binary images to find embedded files using their signature usually known as magic numbers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/EASTER/art# binwalk artist.zip 

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             Zip archive data, at least v2.0 to extract, compressed size: 11500, uncompressed size: 21131, name: nonameyet.mid
11543         0x2D17          Zip archive data, at least v2.0 to extract, compressed size: 79917, uncompressed size: 84355, name: sheet.pdf
91685         0x16625         End of Zip archive, footer length: 22

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exiftool&quot;&gt;Exiftool&lt;/h3&gt;

&lt;p&gt;Tool to extract metadata from a file.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c0dbat@gebian:~$ exiftool logo.png 
ExifTool Version Number         : 10.40
File Name                       : logo.png
Directory                       : .
File Size                       : 8.4 kB
File Modification Date/Time     : 2019:08:03 16:57:44-04:00
File Access Date/Time           : 2019:08:16 09:12:41-04:00
File Inode Change Date/Time     : 2019:08:03 16:57:44-04:00
File Permissions                : rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 1000
Image Height                    : 151
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Background Color                : 255 255 255
Pixels Per Unit X               : 2835
Pixels Per Unit Y               : 2835
Pixel Units                     : meters
Modify Date                     : 2019:04:16 07:12:34
Comment                         : flag{3x1f_4ll_7h3_7hing5}
Image Size                      : 1000x151
Megapixels                      : 0.151
	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xxd&quot;&gt;xxd&lt;/h3&gt;

&lt;p&gt;This tool is used to view the hex bytes of a file. This tool also allows us to convert hex to ASCII and vice-versa.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/EASTER# xxd setup.png 
00000000: 4d5a 5000 0200 0000 0400 0f00 ffff 0000  MZP.............
00000010: b800 0000 0000 0000 4000 1a00 0000 0000  ........@.......
00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000030: 0000 0000 0000 0000 0000 0000 0001 0000  ................
00000040: ba10 000e 1fb4 09cd 21b8 014c cd21 9090  ........!..L.!..
00000050: 5468 6973 2070 726f 6772 616d 206d 7573  This program mus
00000060: 7420 6265 2072 756e 2075 6e64 6572 2057  t be run under W
00000070: 696e 3332 0d0a 2437 0000 0000 0000 0000  in32..$7........

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;strings&quot;&gt;strings&lt;/h3&gt;

&lt;p&gt;This tool prints all printable characters in a file. CTF architects usually hide flags or important clues which can be easily extracted using this simple command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/CTF/EASTER# strings setup.png 
This program must be run under Win32
CODE
`DATA
.idata
.tls
.rdata
P.reloc
P.rsrc
string
flag{5tr1ngs_s4ve5_th3_d4y}
Free
InitInstance
CleanupInstance
	ClassType
	ClassName
ClassNameIs
ClassParent
	ClassInfo
InstanceSize

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jpg-tools-&quot;&gt;JPG Tools &lt;a name=&quot;jpg&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;steghide&quot;&gt;Steghide&lt;/h3&gt;

&lt;p&gt;Steghide  is a steganography program that is able to hide data in various kinds of image and audio-files. The color- respectivly sample-frequencies  are  not  changed thus making the embedding resistant against first-order statistical tests.&lt;/p&gt;

&lt;p&gt;Steghide asks the user for a password and extracts the embedded file is extracted if the password matches. This password can be bruteforced or can be vulnerable to dictionary attacks.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stegcracker&lt;/code&gt; is used for dictionary attacks against files embedded with steghide.&lt;/p&gt;

&lt;h3 id=&quot;stegsolve&quot;&gt;Stegsolve&lt;/h3&gt;

&lt;p&gt;Stegsolve is a simple application that runs on java which is used to analyze images in different planes by taking off bits of the image. This tool plays with the different color levels and gives the output.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/eugenekolo/sec-tools/tree/master/stego/stegsolve/stegsolve&quot;&gt;Download here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-tools-for-jpg&quot;&gt;Other tools for JPG&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://old-releases.ubuntu.com/ubuntu/pool/universe/s/stegdetect&quot;&gt;Stegdetect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/stegbreak&quot;&gt;Stegbreak&lt;/a&gt; Bruteforce cracker for JPG images.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux01.gwdg.de/~alatham/stego.html&quot;&gt;JPseek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux01.gwdg.de/~alatham/stego.html&quot;&gt;Jsteg&lt;/a&gt; for week lsb stego.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jackfengji/f5-steganography&quot;&gt;f5&lt;/a&gt; F5 Steganographic Algorithm with detailed info on the process&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;png-tools-&quot;&gt;PNG Tools &lt;a name=&quot;png&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;zsteg&quot;&gt;Zsteg&lt;/h3&gt;

&lt;p&gt;This tool is used to detect steganography in PNG and BMP files.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;zsteg -a file.png&lt;/code&gt; to run all checks&lt;/p&gt;

&lt;p&gt;It detects:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* LSB steganography in PNG &amp;amp; BMP
* zlib-compressed data
* OpenStego
* Camouflage 1.2.1
* LSB with The Eratosthenes set
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zed-0xff/zsteg&quot;&gt;Download here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;pngcheck&quot;&gt;Pngcheck&lt;/h3&gt;

&lt;p&gt;This tool checks PNG images files for corruption, type, display size and compression info.&lt;/p&gt;

&lt;p&gt;Tool can be installed using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install pngcheck&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;stegano&quot;&gt;Stegano&lt;/h3&gt;

&lt;p&gt;Hides data with various (LSB-based) methods.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;stegano-lsb reveal -i file.png -e UTF-8 -o output.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cedricbonhomme/Stegano&quot;&gt;Download here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-tools-for-png&quot;&gt;Other tools for PNG&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/livz/cloacked-pixel&quot;&gt;cloackedpixel&lt;/a&gt; LSB steganography and detection&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/syvaidya/openstego&quot;&gt;Openstego&lt;/a&gt; Watermarking files (e.g. images) with an invisible signature. It can be used to detect unauthorized file copying.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;audio-tools-&quot;&gt;Audio Tools &lt;a name=&quot;audio&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;ffmpeg&quot;&gt;ffmpeg&lt;/h3&gt;

&lt;p&gt;ffmpeg can be used to check integrity of audio files and let it report infos and errors&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg -v info -i stego.mp3 -f null -&lt;/code&gt; to recode the file and throw away the result&lt;/p&gt;

&lt;h3 id=&quot;mp3stego&quot;&gt;mp3stego&lt;/h3&gt;

&lt;p&gt;MP3Stego will hide information in MP3 files during the compression process. The data is first compressed, encrypted and then hidden in the MP3 bit stream.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;mp3stego-decode -X -P password /path/to/stego.mp3 /path/to/out.pcm /path/to/out.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.petitcolas.net/steganography/mp3stego/&quot;&gt;Download here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;audiostego&quot;&gt;AudioStego&lt;/h3&gt;

&lt;p&gt;Audio file steganography. Hides text or files inside audio files and retrieve them automatically. It actually supports only .mp3 and .wav files as inputs, but you can hide whatever kind of file or text on them.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;hideme [file_with_hidden_data] -f&lt;/code&gt; to retrieve data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/danielcardeenas/AudioStego&quot;&gt;Download here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sonic-visualiser&quot;&gt;Sonic Visualiser&lt;/h3&gt;

&lt;p&gt;Sonic Visualiser is an application for viewing and analysing the contents of music audio files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sonicvisualizer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sonicvisualiser.org/&quot;&gt;Download here&lt;/a&gt;&lt;/p&gt;</content><author><name>Hains Jojo</name></author><category term="CTF" /><category term="stego" /><summary type="html">Table of contents Introduction Tools Basics JPEG Tools PNG Tools Audio Tools</summary></entry><entry><title type="html">xor decrypt</title><link href="http://localhost:4000/blog/2017/11/06/xor-decrypt.html" rel="alternate" type="text/html" title="xor decrypt" /><published>2017-11-06T00:00:00-05:00</published><updated>2017-11-06T00:00:00-05:00</updated><id>http://localhost:4000/blog/2017/11/06/xor-decrypt</id><content type="html" xml:base="http://localhost:4000/blog/2017/11/06/xor-decrypt.html">&lt;h1 id=&quot;ransompics-from-opcde&quot;&gt;RansomPics from OPCDE&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;We have been hit by a ransomware, all our pictures have been encrypted and we need this one right now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Write up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this challenge we were given a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;flag_16.xng&lt;/code&gt; and also a hint was given that it was a png file.&lt;/p&gt;

&lt;p&gt;As most ransomwares use simple encrypting algorithms lets assume that it has been xorred all over.&lt;/p&gt;

&lt;p&gt;As the file has been named &lt;code class=&quot;highlighter-rouge&quot;&gt;flag_16.xng&lt;/code&gt; lets assume that a 16 byte key is used to xor every byte of the file, and we need this key to get the original png back.&lt;/p&gt;

&lt;p&gt;Lets look at the first 16 bytes on the given file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3qL5JJY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets download random png files from the web and have a look at its first 16 bytes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/shC1cqH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So from our observation we can see that most pngs have the same first 16 bytes &lt;code class=&quot;highlighter-rouge&quot;&gt;89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets find the key using this python program&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@c0dbat:~/Desktop# python xorstring.py E2124C6DD3A7A4E5CAF2588C8ECEBABF 89504E470D0A1A0A0000000D49484452
6b42022adeadbeefcaf25881c786feed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So our xor key is &lt;code class=&quot;highlighter-rouge&quot;&gt;6b42022adeadbeefcaf25881c786feed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets decrypt the encrypted file with this program.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x81&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x86&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root@c0dbat:~/Desktop# python xordecrypt.py flag_16.xng &amp;gt;&amp;gt; final.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Voila we got the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DxkHvtZ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Hains Jojo</name></author><category term="CTF" /><category term="ransomware" /><category term="xor" /><summary type="html">RansomPics from OPCDE</summary></entry></feed>